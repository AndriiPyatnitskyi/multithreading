package collections.concurrentMap;

import java.util.Map;
import java.util.concurrent.ConcurrentSkipListMap;

/*
üîé –û–ü–ò–°:
ConcurrentSkipListMap ‚Äî —Ü–µ –ø–æ—Ç–æ–∫–æ–±–µ–∑–ø–µ—á–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è SortedMap / NavigableMap.
–í–æ–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º—É—î –≤–ø–æ—Ä—è–¥–∫–æ–≤–∞–Ω—ñ—Å—Ç—å –∫–ª—é—á—ñ–≤, —è–∫ TreeMap, –∞–ª–µ –Ω–∞ –≤—ñ–¥–º—ñ–Ω—É –≤—ñ–¥ TreeMap:
- —î –ø–æ—Ç–æ–∫–æ–±–µ–∑–ø–µ—á–Ω–æ—é,
- –±–∞–∑—É—î—Ç—å—Å—è –Ω–µ –Ω–∞ –¥–µ—Ä–µ–≤—ñ, –∞ –Ω–∞ skip list (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑ –∫—ñ–ª—å–∫–æ—Ö —Ä—ñ–≤–Ω—ñ–≤ —Å–ø–∏—Å–∫—ñ–≤),
- –¥–æ–∑–≤–æ–ª—è—î –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø, –ø–æ—à—É–∫ —ñ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –≤ –±–∞–≥–∞—Ç–æ–ø–æ—Ç–æ—á–Ω–æ–º—É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ.

‚öô –û–°–û–ë–õ–ò–í–û–°–¢–Ü:
- –ì–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –≤–ø–æ—Ä—è–¥–∫–æ–≤—É—î –∫–ª—é—á—ñ –∑–∞ natural ordering –∞–±–æ —á–µ—Ä–µ–∑ Comparator.
- –ë–µ–∑ –±–ª–æ–∫—É–≤–∞–Ω—å (lock-free reads, fine-grained locking for writes).
- –í–∏—Å–æ–∫–∞ –º–∞—Å—à—Ç–∞–±–æ–≤–∞–Ω—ñ—Å—Ç—å —É –±–∞–≥–∞—Ç–æ–ø–æ—Ç–æ—á–Ω–æ–º—É –¥–æ—Å—Ç—É–ø—ñ.
- –Ü–¥–µ–∞–ª—å–Ω–æ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∏—Ö –∫–µ—à—ñ–≤, —Å–ª–æ–≤–Ω–∏–∫—ñ–≤, —á–µ—Ä–≥ –∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º –∑–∞ –∫–ª—é—á–∞–º–∏ —Ç–æ—â–æ.

üìå –ö–û–õ–ò –í–ò–ö–û–†–ò–°–¢–û–í–£–í–ê–¢–ò:
- –ö–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–µ–Ω –ø–æ—Ç–æ–∫–æ–±–µ–∑–ø–µ—á–Ω–∏–π SortedMap.
- –ö–æ–ª–∏ –≤–∞–∂–ª–∏–≤–∏–π –ø–æ—Ä—è–¥–æ–∫ –∫–ª—é—á—ñ–≤.
- –ö–æ–ª–∏ TreeMap –Ω–µ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —á–µ—Ä–µ–∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó.

---
üìï 1. Lock-free reads (—á–∏—Ç–∞–Ω–Ω—è –±–µ–∑ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è)
–¶–µ –æ–∑–Ω–∞—á–∞—î, —â–æ —á–∏—Ç–∞—á—ñ (threads, —è–∫—ñ —á–∏—Ç–∞—é—Ç—å) –º–æ–∂—É—Ç—å:
–ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –≤–º—ñ—Å—Ç –º–∞–ø–∏,
–≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—ó —Ç–∏–ø—É get(), containsKey(), forEach()
–±–µ–∑ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∞–±–æ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è —ñ–Ω—à–∏—Ö –ø–æ—Ç–æ–∫—ñ–≤.
üîç –ù–∞–ø—Ä–∏–∫–ª–∞–¥:
String value = map.get(42); // –ù–µ –±–ª–æ–∫—É—î –Ω—ñ–∫–æ–≥–æ
‚úÖ –¶–µ –º–æ–∂–ª–∏–≤–æ –∑–∞–≤–¥—è–∫–∏ —Ç–æ–º—É, —â–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ SkipList –¥–æ–∑–≤–æ–ª—è—î –Ω–µ–∫–æ–Ω—Ñ–ª—ñ–∫—Ç–Ω–∏–π –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤, —ñ —á–∏—Ç–∞—á—ñ –Ω–µ –∑–∞–≤–∞–∂–∞—é—Ç—å –æ–¥–∏–Ω –æ–¥–Ω–æ–º—É —Ç–∞ –Ω–∞–≤—ñ—Ç—å –∑–∞–ø–∏—Å—É–≤–∞—á–∞–º —É –±–∞–≥–∞—Ç—å–æ—Ö –≤–∏–ø–∞–¥–∫–∞—Ö.

üìï 2. Fine-grained locking for writes (–ª–æ–∫–∞–ª—å–Ω—ñ, –¥—Ä—ñ–±–Ω–æ–∑–µ—Ä–Ω–∏—Å—Ç—ñ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –¥–ª—è –∑–∞–ø–∏—Å—É)
–ö–æ–ª–∏ —Ç—Ä–µ–±–∞ –≤—Å—Ç–∞–≤–∏—Ç–∏, –≤–∏–¥–∞–ª–∏—Ç–∏ —á–∏ –æ–Ω–æ–≤–∏—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç (put, remove, replace), —Ç–æ–¥—ñ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è ‚Äî –∞–ª–µ:
‚úÖ –Ω–µ –≥–ª–æ–±–∞–ª—å–Ω–µ (–Ω–µ –±–ª–æ–∫—É—î—Ç—å—Å—è –≤—Å—è –º–∞–ø–∞),
‚úÖ –∞ –ª–æ–∫–∞–ª—å–Ω–µ ‚Äî –ª–∏—à–µ —á–∞—Å—Ç–∏–Ω–∞ —Å–ø–∏—Å–∫—É, —â–æ —Å—Ç–æ—Å—É—î—Ç—å—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—É–∑–ª–∞ –∞–±–æ —Å–µ–≥–º–µ–Ω—Ç–∞.
–¶–µ –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è fine-grained locking ‚Äî –∑–∞–º—ñ—Å—Ç—å –≤–µ–ª–∏–∫–æ–≥–æ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –∑–∞–º–∫–∞, —Å–∏—Å—Ç–µ–º–∞ –±–ª–æ–∫—É—î –ª–∏—à–µ —Ç–µ, —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —ñ –ª–∏—à–µ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–π —á–∞—Å.

| –û–ø–µ—Ä–∞—Ü—ñ—è       | TreeMap + synchronized | ConcurrentHashMap   | ConcurrentSkipListMap          |
| -------------- | ---------------------- | ------------------- | ------------------------------ |
| `get()`        | –±–ª–æ–∫—É—î –≤—Å—é –º–∞–ø—É        | –±–µ–∑ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è      | –±–µ–∑ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è                 |
| `put()`        | –±–ª–æ–∫—É—î –≤—Å—é –º–∞–ø—É        | –±–ª–æ–∫—É—î –ª–∏—à–µ —Å–µ–≥–º–µ–Ω—Ç | –±–ª–æ–∫—É—î –ª–∏—à–µ —á–∞—Å—Ç–∏–Ω—É —Å–ø–∏—Å–∫—É     |
| –ü–æ—Ä—è–¥–æ–∫ –∫–ª—é—á—ñ–≤ | —î                      | –Ω–µ–º–∞—î               | —î                              |
| –ü–∞—Ä–∞–ª–µ–ª—ñ–∑–º     | –Ω–∏–∑—å–∫–∏–π                | –≤–∏—Å–æ–∫–∏–π             | –≤–∏—Å–æ–∫–∏–π, –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º –ø–æ—Ä—è–¥–∫–æ–º |
*/

public class ConcurrentSkipListMapExample {
    public static void main(String[] args) {
        Map<Integer, String> map = new ConcurrentSkipListMap<>();

        // –ü–æ—Ç—ñ–∫ –¥–ª—è –∑–∞–ø–∏—Å—É –≤ –º–∞–ø—É
        Thread writer = new Thread(() -> {
            for (int i = 5; i >= 1; i--) {
                map.put(i, "Value-" + i);
                System.out.println("Inserted: " + i + " -> Value-" + i);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        // –ü–æ—Ç—ñ–∫ –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è –∑ –º–∞–ø–∏
        Thread reader = new Thread(() -> {
            try {
                Thread.sleep(300); // —Ç—Ä–æ—Ö–∏ –ø–æ—á–µ–∫–∞—Ç–∏, –ø–æ–∫–∏ –±—É–¥–µ —â–æ—Å—å —É –º–∞–ø—ñ
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
            map.forEach((key, value) -> System.out.println("Read: " + key + " -> " + value));
        });

        writer.start();
        reader.start();
    }
}
