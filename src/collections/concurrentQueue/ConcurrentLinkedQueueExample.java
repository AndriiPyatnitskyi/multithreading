package collections.concurrentQueue;

import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

/*
üîé –û–ü–ò–°:
ConcurrentLinkedQueue ‚Äî —Ü–µ –Ω–µ–±–ª–æ–∫—É—é—á–∞ –ø–æ—Ç–æ–∫–æ–±–µ–∑–ø–µ—á–Ω–∞ —á–µ—Ä–≥–∞, —è–∫–∞ –±–∞–∑—É—î—Ç—å—Å—è –Ω–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞—Ö –±–µ–∑ –±–ª–æ–∫—É–≤–∞–Ω—å (lock-free).
–í–æ–Ω–∞ —Ä–µ–∞–ª—ñ–∑—É—î —á–µ—Ä–≥—É FIFO (first-in-first-out), —ñ–¥–µ–∞–ª—å–Ω–∞ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤ –∑ –≤–µ–ª–∏–∫–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ø–æ—Ç–æ–∫—ñ–≤,
—è–∫—ñ —á–∞—Å—Ç–æ –¥–æ–¥–∞—é—Ç—å —Ç–∞ –≤–∏–¥–∞–ª—è—é—Ç—å –µ–ª–µ–º–µ–Ω—Ç–∏.

‚öô –û–°–û–ë–õ–ò–í–û–°–¢–Ü:
- –ü–æ—Ç–æ–∫–æ–±–µ–∑–ø–µ—á–Ω–∞ –±–µ–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è synchronized –∞–±–æ –±–ª–æ–∫—É–≤–∞–Ω—å.
- –ù–µ–º–∞—î –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –ø—ñ–¥ —á–∞—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è/–≤–∏–¥–∞–ª–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤.
- –ú–µ—Ç–æ–¥–∏ `offer()` —ñ `poll()` –Ω–µ –±–ª–æ–∫—É—é—Ç—å –ø–æ—Ç–æ–∫–∏.
- –í–∏—Å–æ–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ –∑ –≤–µ–ª–∏–∫–æ—é –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—î—é –ø–æ—Ç–æ–∫—ñ–≤.
- –ü—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –æ–±–º—ñ–Ω—É –¥–∞–Ω–∏–º–∏ –º—ñ–∂ –ø–æ—Ç–æ–∫–∞–º–∏.

üìå –ö–û–õ–ò –í–ò–ö–û–†–ò–°–¢–û–í–£–í–ê–¢–ò:
- –ö–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –Ω–µ–±–ª–æ–∫—É—é—á–∞ —á–µ—Ä–≥–∞.
- –ö–æ–ª–∏ –º–æ–∂–ª–∏–≤–µ —á–∞—Å—Ç–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è/–≤–∏–¥–∞–ª–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∑ –∫—ñ–ª—å–∫–æ—Ö –ø–æ—Ç–æ–∫—ñ–≤.
- –ö–æ–ª–∏ –∑–∞—Ç—Ä–∏–º–∫–∏ –≤—ñ–¥ –±–ª–æ–∫—É–≤–∞–Ω—å —î –∫—Ä–∏—Ç–∏—á–Ω–∏–º–∏.

*/

public class ConcurrentLinkedQueueExample {

    public static void main(String[] args) {
        Queue<String> queue = new ConcurrentLinkedQueue<>();

        // –ü–æ—Ç—ñ–∫ 1 –¥–æ–¥–∞—î –µ–ª–µ–º–µ–Ω—Ç–∏
        Thread producer = new Thread(() -> {
            for (int i = 0; i < 5; i++) {
                String item = "item-" + i;
                queue.offer(item); // –¥–æ–¥–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –¥–æ —á–µ—Ä–≥–∏
                System.out.println("Produced: " + item);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        // –ü–æ—Ç—ñ–∫ 2 —Å–ø–æ–∂–∏–≤–∞—î –µ–ª–µ–º–µ–Ω—Ç–∏
        Thread consumer = new Thread(() -> {
            for (int i = 0; i < 5; i++) {
                while (true) {
                    String item = queue.poll(); // –Ω–∞–º–∞–≥–∞—î–º–æ—Å—å –∑–∞–±—Ä–∞—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç
                    if (item != null) {
                        System.out.println("Consumed: " + item);
                        break;
                    }
                    try {
                        Thread.sleep(50); // —á–µ–∫–∞—î–º–æ, –ø–æ–∫–∏ –∑'—è–≤–∏—Ç—å—Å—è –µ–ª–µ–º–µ–Ω—Ç
                    } catch (InterruptedException e) {
                        throw new RuntimeException(e);
                    }
                }
            }
        });

        producer.start();
        consumer.start();
    }
}
