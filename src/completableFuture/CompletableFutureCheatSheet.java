package completableFuture;

import java.util.concurrent.*;
import java.util.function.*;

public class CompletableFutureCheatSheet {

    /**
     * üîπ CompletableFuture ‚Äî –∫–ª–∞—Å –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö.
     *
     * –û—Å–Ω–æ–≤–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:
     * - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (runAsync, supplyAsync)
     * - –ª–∞–Ω—Ü—é–∂–∫–∏ thenApply / thenAccept / thenRun
     * - –∫–æ–º–±—ñ–Ω—É–≤–∞–Ω–Ω—è future-–æ–±'—î–∫—Ç—ñ–≤
     * - –æ–±—Ä–æ–±–∫–∞ –≤–∏–Ω—è—Ç–∫—ñ–≤
     * - —Ç–∞–π–º-–∞—É—Ç
     * - —Ä—É—á–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
     * - "–∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è" future —á–µ—Ä–µ–∑ whenComplete –∞–±–æ completedFuture
     */

    public static void main(String[] args) throws ExecutionException, InterruptedException {

        // ‚úÖ 1. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –∑–∞–ø—É—Å–∫ –∑ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º –∑–Ω–∞—á–µ–Ω–Ω—è
        CompletableFuture<String> cf = CompletableFuture.supplyAsync(() -> {
            sleep(1000);
            return "Hello";
        });

        // ‚úÖ 2. –õ–∞–Ω—Ü—é–≥–æ–≤–∞ –æ–±—Ä–æ–±–∫–∞
        cf.thenApply(result -> result + " World")
                .thenAccept(System.out::println)
                .exceptionally(ex -> {
                    System.out.println("Error: " + ex.getMessage());
                    return null;
                });

        // ‚úÖ 3. –ö–æ–º–±—ñ–Ω—É–≤–∞–Ω–Ω—è –¥–≤–æ—Ö CompletableFuture
        CompletableFuture<String> f1 = CompletableFuture.supplyAsync(() -> "First");
        CompletableFuture<String> f2 = CompletableFuture.supplyAsync(() -> "Second");

        f1.thenCombine(f2, (a, b) -> a + " + " + b)
                .thenAccept(System.out::println);

        // ‚úÖ 4. –ö–æ–º–ø–æ–∑–∏—Ü—ñ—è: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–¥–Ω–æ–≥–æ —è–∫ –≤—Ö—ñ–¥ –≤ —ñ–Ω—à–∏–π
        CompletableFuture<String> composed = f1.thenCompose(res ->
                CompletableFuture.supplyAsync(() -> res + " composed"));
        composed.thenAccept(System.out::println);

        // ‚úÖ 5. allOf: –∫–æ–ª–∏ –í–°–Ü futures –∑–∞–≤–µ—Ä—à–µ–Ω—ñ
        CompletableFuture<Void> all = CompletableFuture.allOf(f1, f2);
        all.thenRun(() -> System.out.println("All done"));

        // ‚úÖ 6. anyOf: –∫–æ–ª–∏ –ü–ï–†–®–ò–ô –∑–∞–≤–µ—Ä—à–µ–Ω–æ
        CompletableFuture<Object> any = CompletableFuture.anyOf(f1, f2);
        any.thenAccept(res -> System.out.println("First done: " + res));

        // ‚úÖ 7. –†—É—á–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        CompletableFuture<String> manual = new CompletableFuture<>();
        manual.complete("Manual result");
        manual.thenAccept(System.out::println);

        // ‚úÖ 8. –¢–∞–π–º–∞—É—Ç–∏
        CompletableFuture<String> slowFuture = CompletableFuture.supplyAsync(() -> {
            sleep(3000);
            return "Too slow";
        });

        slowFuture
                .orTimeout(1, TimeUnit.SECONDS)
                .exceptionally(ex -> "Recovered from timeout")
                .thenAccept(System.out::println);

        CompletableFuture<String> withDefault = CompletableFuture.supplyAsync(() -> {
            sleep(3000);
            return "Too slow again";
        });

        withDefault
                .completeOnTimeout("Default value", 1, TimeUnit.SECONDS)
                .thenAccept(System.out::println);

        // ‚úÖ 9. –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è CompletableFuture —á–µ—Ä–µ–∑ whenComplete
        CompletableFuture<String> original = CompletableFuture.supplyAsync(() -> "Original Future");
        CompletableFuture<String> copy = copyFuture(original);
        copy.thenAccept(result -> System.out.println("Copied result: " + result));

        // ‚úÖ 10. completedFuture ‚Äî –≥–æ—Ç–æ–≤–∞ "–∫–æ–ø—ñ—è" –∑–Ω–∞—á–µ–Ω–Ω—è
        CompletableFuture<String> ready = CompletableFuture.completedFuture("Precomputed copy");
        ready.thenAccept(result -> System.out.println("Completed future value: " + result));

        // ‚úÖ 11. –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è CompletableFuture —á–µ—Ä–µ–∑ copy()
        // Attempting to complete the copied future will not affect the original
        // This line would have no effect if originalFuture was already completed.
        // If originalFuture was not yet completed, calling complete on copiedFuture
        // would only affect copiedFuture, not originalFuture.
        // copiedFuture.complete("New value on copy");
        CompletableFuture<String> originalFuture = new CompletableFuture<>();
        // Create a defensive copy
        CompletableFuture<String> copiedFuture = originalFuture.copy();
        // Complete the original future
        originalFuture.complete("Original value");
        // The copied future will also complete with the same value
        System.out.println("Copied future result: " + copiedFuture.get());
    }

    /**
     * –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π CompletableFuture, —è–∫–∏–π –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è —Ç–æ–¥—ñ –∂ —ñ —Ç–∏–º –∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∞–±–æ –≤–∏–Ω—è—Ç–∫–æ–º, —â–æ –π original.
     */
    public static <T> CompletableFuture<T> copyFuture(CompletableFuture<T> original) {
        CompletableFuture<T> copy = new CompletableFuture<>();
        original.whenComplete((res, ex) -> {
            if (ex != null) copy.completeExceptionally(ex);
            else copy.complete(res);
        });
        return copy;
    }

    private static void sleep(long ms) {
        try {
            Thread.sleep(ms);
        } catch (InterruptedException ignored) {}
    }
}

